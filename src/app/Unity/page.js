'use client'
import React, { useState, useEffect, useRef } from 'react'
import {
	Gamepad2,
	Zap,
	Trophy,
	Heart,
	Star,
	Users,
	Clock,
	Award,
	Play,
	Download,
	Cpu,
	ArrowLeft,
	Gem,
	BookOpen,
	BrainCircuit,
	Code,
	Lightbulb,
} from 'lucide-react'
import Link from 'next/link'
import styles from './UnityCoursePage.module.css'
import gsap from 'gsap'
import { ScrollTrigger } from 'gsap/ScrollTrigger'

gsap.registerPlugin(ScrollTrigger)

const UnityCoursePage = () => {
	const [score, setScore] = useState(0)
	const [lives, setLives] = useState(3)
	const [pacmanPosition, setPacmanPosition] = useState({ x: 0, y: 0 })
	const [ghosts, setGhosts] = useState([])
	const [coins, setCoins] = useState([])
	const mainRef = useRef(null)

	// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∏ —Ç–∞ –∞–Ω—ñ–º–∞—Ü—ñ–π
	useEffect(() => {
		// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –º–æ–Ω–µ—Ç
		const initialCoins = Array.from({ length: 50 }, (_, i) => ({
			id: `coin-${i}`,
			x: Math.random() * window.innerWidth,
			y: Math.random() * window.innerHeight,
		}))
		setCoins(initialCoins)

		// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –ø—Ä–∏–≤–∏–¥—ñ–≤
		const initialGhosts = [
			{
				id: 'blinky',
				color: 'blinky',
				x: 200,
				y: 100,
				dir: { x: 1, y: 0 },
				speed: 1.5,
			},
			{
				id: 'pinky',
				color: 'pinky',
				x: 300,
				y: 500,
				dir: { x: -1, y: 0 },
				speed: 1.2,
			},
			{
				id: 'inky',
				color: 'inky',
				x: 600,
				y: 200,
				dir: { x: 0, y: 1 },
				speed: 1.8,
			},
			{
				id: 'clyde',
				color: 'clyde',
				x: 800,
				y: 400,
				dir: { x: 0, y: -1 },
				speed: 1,
			},
		]
		setGhosts(initialGhosts)

		// –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∫—É—Ä—Å–æ—Ä—É –¥–ª—è Pac-Man
		

		// –ê–Ω—ñ–º–∞—Ü—ñ—è —Ä–∞—Ö—É–Ω–∫—É
		const scoreInterval = setInterval(() => {
			setScore(prev => prev + Math.floor(Math.random() * 150 + 50))
		}, 2500)

		// GSAP –∞–Ω—ñ–º–∞—Ü—ñ—ó –ø—Ä–∏ —Å–∫—Ä–æ–ª—ñ
		const ctx = gsap.context(() => {
			const sections = gsap.utils.toArray(`.${styles.animateUp}`)
			sections.forEach(section => {
				gsap.fromTo(
					section,
					{ y: 60, opacity: 0 },
					{
						y: 0,
						opacity: 1,
						duration: 1,
						ease: 'power3.out',
						scrollTrigger: {
							trigger: section,
							start: 'top 85%',
							toggleActions: 'play none none reverse',
						},
					}
				)
			})
		}, mainRef)

		return () => {
			window.removeEventListener('mousemove', handleMouseMove)
			clearInterval(scoreInterval)
			ctx.revert()
		}
	}, [])

	// –ê–Ω—ñ–º–∞—Ü—ñ—è —Ä—É—Ö—É –ø—Ä–∏–≤–∏–¥—ñ–≤
	useEffect(() => {
		const moveGhosts = () => {
			setGhosts(prevGhosts =>
				prevGhosts.map(ghost => {
					let { x, y, dir, speed } = ghost
					x += dir.x * speed
					y += dir.y * speed

					// –ó–º—ñ–Ω–∞ –Ω–∞–ø—Ä—è–º–∫—É –ø—Ä–∏ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—ñ –∑—ñ —Å—Ç—ñ–Ω–∞–º–∏
					if (x < 0 || x > window.innerWidth - 40) dir.x *= -1
					if (y < 0 || y > window.innerHeight - 40) dir.y *= -1

					// –í–∏–ø–∞–¥–∫–æ–≤–∞ –∑–º—ñ–Ω–∞ –Ω–∞–ø—Ä—è–º–∫—É
					if (Math.random() < 0.005) {
						const newDir = Math.random() > 0.5 ? 'x' : 'y'
						const newV = Math.random() > 0.5 ? 1 : -1
						if (newDir === 'x') dir = { x: newV, y: 0 }
						else dir = { x: 0, y: newV }
					}

					return { ...ghost, x, y, dir }
				})
			)
		}

		const ghostInterval = setInterval(moveGhosts, 1000 / 60) // 60 FPS
		return () => clearInterval(ghostInterval)
	}, [])

	const modules = [
		{
			title: '–û—Å–Ω–æ–≤–∏ Unity —Ç–∞ C#',
			duration: '4 —Ç–∏–∂–Ω—ñ',
			topics: [
				'–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å Unity',
				'–û—Å–Ω–æ–≤–∏ C#',
				"–†–æ–±–æ—Ç–∞ –∑ –æ–±'—î–∫—Ç–∞–º–∏",
				'–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—à–æ—ó —Å—Ü–µ–Ω–∏',
			],
			Icon: Gamepad2,
		},
		{
			title: '–†–æ–∑—Ä–æ–±–∫–∞ 2D-—ñ–≥–æ—Ä',
			duration: '5 —Ç–∏–∂–Ω—ñ–≤',
			topics: [
				'–°–ø—Ä–∞–π—Ç–∏ —Ç–∞ –∞–Ω—ñ–º–∞—Ü—ñ—ó',
				'–§—ñ–∑–∏–∫–∞ 2D',
				'–î–∏–∑–∞–π–Ω —Ä—ñ–≤–Ω—ñ–≤',
				'–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä–∞',
			],
			Icon: Zap,
		},
		{
			title: '–°–≤—ñ—Ç 3D-–≥—Ä–∞—Ñ—ñ–∫–∏',
			duration: '6 —Ç–∏–∂–Ω—ñ–≤',
			topics: [
				'3D-–º–æ–¥–µ–ª—ñ —Ç–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏',
				'–û—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è —Ç–∞ –∫–∞–º–µ—Ä–∏',
				'–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–∞–Ω–¥—à–∞—Ñ—Ç—É',
				'–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –≤—ñ–¥ –ø–µ—Ä—à–æ—ó –æ—Å–æ–±–∏',
			],
			Icon: Cpu,
		},
		{
			title: '–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –≥—Ä–∏',
			duration: '3 —Ç–∏–∂–Ω—ñ',
			topics: [
				'–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ',
				'UI/UX –¥–ª—è —ñ–≥–æ—Ä',
				'–ó–±—ñ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç—É',
				'–†–µ–ª—ñ–∑ –≤ –º–∞—Ä–∫–µ—Ç–∞—Ö',
			],
			Icon: Trophy,
		},
	]

	const projects = [
		{
			name: '2D –ü–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä',
			difficulty: '–õ–µ–≥–∫–∏–π',
			time: '2 —Ç–∏–∂–Ω—ñ',
			description:
				'–°—Ç–≤–æ—Ä—ñ—Ç—å –∫–ª–∞—Å–∏—á–Ω—É –∞—Ä–∫–∞–¥—É –∑ –≤–ª–∞—Å–Ω–∏–º –¥–∏–∑–∞–π–Ω–æ–º —Ä—ñ–≤–Ω—ñ–≤ —Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤.',
			icon: 'üëæ',
			points: 1000,
		},
		{
			name: '–ö–æ—Å–º—ñ—á–Ω–∏–π —à—É—Ç–µ—Ä',
			difficulty: '–°–µ—Ä–µ–¥–Ω—ñ–π',
			time: '3 —Ç–∏–∂–Ω—ñ',
			description: '–î–∏–Ω–∞–º—ñ—á–Ω–∞ –≥—Ä–∞ –∑ –≤–æ—Ä–æ–≥–∞–º–∏, –±–æ–Ω—É—Å–∞–º–∏ —Ç–∞ —Å–∏—Å—Ç–µ–º–æ—é –ø–æ—Å—Ç—Ä—ñ–ª—ñ–≤.',
			icon: 'üöÄ',
			points: 2500,
		},
		{
			name: '3D –ü–µ—Ä–µ–≥–æ–Ω–∏',
			difficulty: '–°–∫–ª–∞–¥–Ω–∏–π',
			time: '4 —Ç–∏–∂–Ω—ñ',
			description:
				'–°—Ç–≤–æ—Ä—ñ—Ç—å –≥–æ–Ω–æ—á–Ω—É –≥—Ä—É –∑ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–æ—é —Ñ—ñ–∑–∏–∫–æ—é, —Ç—Ä–∞—Å–∞–º–∏ —Ç–∞ —Å—É–ø–µ—Ä–Ω–∏–∫–∞–º–∏.',
			icon: 'üèéÔ∏è',
			points: 5000,
		},
		{
			name: 'RPG-–ø—Ä–∏–≥–æ–¥–∞',
			difficulty: '–ï–∫—Å–ø–µ—Ä—Ç',
			time: '5 —Ç–∏–∂–Ω—ñ–≤',
			description: '–†–æ–∑—Ä–æ–±—ñ—Ç—å —Å–≤—ñ–π —Å–≤—ñ—Ç –∑ –∫–≤–µ—Å—Ç–∞–º–∏, –¥—ñ–∞–ª–æ–≥–∞–º–∏ —Ç–∞ —Å–∏—Å—Ç–µ–º–æ—é –±–æ—é.',
			icon: 'üè∞',
			points: 10000,
		},
	]

	const features = [
		{
			Icon: BrainCircuit,
			title: '–Ü–≥—Ä–æ–≤–µ –º–∏—Å–ª–µ–Ω–Ω—è',
			desc: '–ù–∞–≤—á—ñ—Ç—å—Å—è –¥—É–º–∞—Ç–∏ —è–∫ –≥–µ–π–º–¥–∏–∑–∞–π–Ω–µ—Ä',
		},
		{
			Icon: Code,
			title: '–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –Ω–∞ C#',
			desc: '–û–ø–∞–Ω—É–π—Ç–µ –º–æ–≤—É, —è–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª–∏',
		},
		{
			Icon: Gem,
			title: '–î–∏–∑–∞–π–Ω —Ä—ñ–≤–Ω—ñ–≤',
			desc: '–°—Ç–≤–æ—Ä—é–π—Ç–µ –∑–∞—Ö–æ–ø–ª—é—é—á—ñ —Å–≤—ñ—Ç–∏ –¥–ª—è –≥—Ä–∞–≤—Ü—ñ–≤',
		},
		{
			Icon: Lightbulb,
			title: '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å',
			desc: '–í—Ç—ñ–ª—é–π—Ç–µ –Ω–∞–π—Å–º—ñ–ª–∏–≤—ñ—à—ñ —ñ–¥–µ—ó —É –≤–ª–∞—Å–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö',
		},
	]

	return (
		<div className={styles.container}>
			{/* --- –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ñ–æ–Ω --- */}
			<div className={styles.gameBackground}>
				<div className={styles.gridPattern}></div>
				{coins.map(coin => (
					<div
						key={coin.id}
						className={styles.coin}
						style={{ left: coin.x, top: coin.y }}
					/>
				))}
				{ghosts.map(ghost => (
					<div
						key={ghost.id}
						className={`${styles.ghost} ${styles[ghost.color]}`}
						style={{
							left: ghost.x,
							top: ghost.y,
							transform: `scaleX(${ghost.dir.x < 0 ? -1 : 1})`,
						}}
					>
						<div className={styles.ghostEyes}>
							<div className={styles.ghostEye}></div>
							<div className={styles.ghostEye}></div>
						</div>
					</div>
				))}
				<div
					className={styles.pacman}
					style={{ left: pacmanPosition.x, top: pacmanPosition.y }}
				></div>
			</div>

			{/* --- –Ü–≥—Ä–æ–≤–∏–π HUD --- */}
			<div className={styles.gameHud}>
				<Link href='/' className={styles.backButton}>
					<ArrowLeft size={18} /> –ù–∞ –≥–æ–ª–æ–≤–Ω—É
				</Link>
				<div className={styles.scoreBoard}>
					<div className={styles.scoreItem}>
						<span className={styles.scoreLabel}>SCORE</span>
						<span className={styles.scoreValue}>
							{score.toString().padStart(6, '0')}
						</span>
					</div>
					<div className={styles.scoreItem}>
						<span className={styles.scoreLabel}>LIVES</span>
						<span className={styles.livesContainer}>
							{[...Array(lives)].map((_, i) => (
								<Heart key={i} className={styles.lifeHeart} />
							))}
						</span>
					</div>
					<div className={styles.scoreItem}>
						<span className={styles.scoreLabel}>LEVEL</span>
						<span className={styles.scoreValue}>01</span>
					</div>
				</div>
			</div>

			<main className={styles.mainContent} ref={mainRef}>
				{/* --- Hero –°–µ–∫—Ü—ñ—è --- */}
				<section className={`${styles.heroSection} ${styles.animateUp}`}>
					<div className={styles.heroContent}>
						<div className={styles.gameTitle}>
							<div className={styles.titleLine1}>UNITY</div>
							<div className={styles.titleLine2}>GAME DEV</div>
						</div>
						<p className={styles.description}>
							–ü–µ—Ä–µ—Ç–≤–æ—Ä–∏ —Å–≤–æ—é –ø—Ä–∏—Å—Ç—Ä–∞—Å—Ç—å –¥–æ —ñ–≥–æ—Ä –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—ñ—é! –ù–∞–≤—á—ñ—Ç—å—Å—è
							—Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –≤–ª–∞—Å–Ω—ñ 2D —Ç–∞ 3D —Å–≤—ñ—Ç–∏ –Ω–∞ –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–æ–º—É —ñ–≥—Ä–æ–≤–æ–º—É
							—Ä—É—à—ñ—ó —É —Å–≤—ñ—Ç—ñ.
						</p>
						<div className={styles.ctaButtons}>
							<button className={styles.startButton}>
								<Play size={20} /> –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –∫—É—Ä—Å
							</button>
							<button className={styles.secondaryButton}>
								<Download size={20} /> –ü—Ä–æ–≥—Ä–∞–º–∞ –∫—É—Ä—Å—É
							</button>
						</div>
					</div>
				</section>

				{/* --- –ü—Ä–æ–≥—Ä–∞–º–∞ –∫—É—Ä—Å—É --- */}
				<section
					className={`${styles.modulesSection} ${styles.animateUp}`}
					id='modules'
				>
					<header className={styles.sectionHeader}>
						<h2 className={styles.sectionTitle}>–ü—Ä–æ–≥—Ä–∞–º–∞ –∫—É—Ä—Å—É</h2>
						<p className={styles.sectionSubtitle}>
							–ß–æ—Ç–∏—Ä–∏ –∫–ª—é—á–æ–≤—ñ –µ—Ç–∞–ø–∏, —è–∫—ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä—è—Ç—å –≤–∞—Å –Ω–∞ —Å–ø—Ä–∞–≤–∂–Ω—å–æ–≥–æ
							—Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ —ñ–≥–æ—Ä.
						</p>
					</header>
					<div className={styles.modulesGrid}>
						{modules.map((module, index) => (
							<div key={index} className={styles.moduleCard}>
								<div className={styles.moduleHeader}>
									<div className={styles.moduleIcon}>
										<module.Icon size={24} />
									</div>
									<span className={styles.levelBadge}>–ï—Ç–∞–ø {index + 1}</span>
								</div>
								<h3 className={styles.moduleTitle}>{module.title}</h3>
								<p className={styles.moduleDuration}>{module.duration}</p>
								<ul className={styles.moduleTopics}>
									{module.topics.map((topic, i) => (
										<li key={i}>{topic}</li>
									))}
								</ul>
							</div>
						))}
					</div>
				</section>

				{/* --- –ü—Ä–∏–∫–ª–∞–¥–∏ –ø—Ä–æ–µ–∫—Ç—ñ–≤ --- */}
				<section
					className={`${styles.projectsSection} ${styles.animateUp}`}
					id='projects'
				>
					<header className={styles.sectionHeader}>
						<h2 className={styles.sectionTitle}>–ü—Ä–∏–∫–ª–∞–¥–∏ –ø—Ä–æ–µ–∫—Ç—ñ–≤</h2>
						<p className={styles.sectionSubtitle}>
							–ö–æ–∂–µ–Ω –º–æ–¥—É–ª—å –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –≤–ª–∞—Å–Ω–æ—ó –≥—Ä–∏, —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —è–∫–æ—ó
							–∑—Ä–æ—Å—Ç–∞—î –∑ –≤–∞—à–∏–º–∏ –Ω–∞–≤–∏—á–∫–∞–º–∏.
						</p>
					</header>
					<div className={styles.projectsGrid}>
						{projects.map((project, index) => (
							<div key={index} className={styles.projectCard}>
								<div className={styles.projectHeader}>
									<div className={styles.projectIcon}>{project.icon}</div>
									<div className={styles.projectPoints}>
										+{project.points} PTS
									</div>
								</div>
								<h3 className={styles.projectTitle}>{project.name}</h3>
								<div className={styles.difficultyBar}>
									<span className={styles.difficultyLabel}>
										{project.difficulty}
									</span>
									<div className={styles.difficultyProgress}>
										<div
											className={styles.difficultyFill}
											style={{ width: `${(index + 1) * 25}%` }}
										></div>
									</div>
								</div>
								<p className={styles.projectDescription}>
									{project.description}
								</p>
								<div className={styles.projectFooter}>
									<div className={styles.projectTime}>
										<Clock size={14} /> {project.time}
									</div>
									<button className={styles.selectButton}>–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ</button>
								</div>
							</div>
						))}
					</div>
				</section>

				{/* --- –ö–ª—é—á–æ–≤—ñ –Ω–∞–≤–∏—á–∫–∏ --- */}
				<section
					className={`${styles.featuresSection} ${styles.animateUp}`}
					id='features'
				>
					<header className={styles.sectionHeader}>
						<h2 className={styles.sectionTitle}>–ö–ª—é—á–æ–≤—ñ –Ω–∞–≤–∏—á–∫–∏</h2>
						<p className={styles.sectionSubtitle}>
							–©–æ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ, –ø—Ä–æ–π—à–æ–≤—à–∏ —Ü–µ–π –∫—É—Ä—Å.
						</p>
					</header>
					<div className={styles.featuresGrid}>
						{features.map((feature, index) => (
							<div key={index} className={styles.featureCard}>
								<div className={styles.featureIcon}>
									<feature.Icon size={32} />
								</div>
								<h3 className={styles.featureTitle}>{feature.title}</h3>
								<p className={styles.featureDescription}>{feature.desc}</p>
							</div>
						))}
					</div>
				</section>

				{/* --- CTA –°–µ–∫—Ü—ñ—è --- */}
				<section className={`${styles.ctaSection} ${styles.animateUp}`}>
					<div className={styles.ctaContainer}>
						<h2 className={styles.ctaTitle}>–ì–æ—Ç–æ–≤—ñ –ø–æ—á–∞—Ç–∏ –≥—Ä—É?</h2>
						<p className={styles.ctaText}>
							–ó—Ä–æ–±—ñ—Ç—å –ø–µ—Ä—à–∏–π –∫—Ä–æ–∫ –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–≥–æ—Ä –≤–∞—à–æ—ó –º—Ä—ñ—ó. –ó–∞–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞
							–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –ø—Ä–æ–±–Ω–∏–π —É—Ä–æ–∫!
						</p>

					</div>
				</section>
			</main>
		</div>
	)
}

export default UnityCoursePage
