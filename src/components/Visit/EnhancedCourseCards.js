'use client'
import React, { useState, useEffect, useMemo, useRef } from 'react'
import {
	Star,
	Users,
	Clock,
	PlayCircle,
	ArrowRight,
	Target,
	CheckCircle,
	Eye,
} from 'lucide-react'
import styles from './EnhancedCourseCards.module.css'
import Link from 'next/link'
import { useRouter } from 'next/navigation'

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —á–∞—Å—Ç–∏–Ω–æ–∫ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ç–µ–º–∏
const generateParticles = colors => {
	const particleTypes = [
		{ type: 'particle1', count: 20, colors: colors.slice(0, 2) },
		{ type: 'particle2', count: 15, colors: colors.slice(1, 3) },
		{ type: 'particle3', count: 12, colors: colors.slice(2, 4) },
		{ type: 'particle4', count: 18, colors: [colors[3], colors[0]] },
	]

	return particleTypes.flatMap(({ type, count, colors }) =>
		Array.from({ length: count }, (_, i) => ({
			id: `${type}-${i}`,
			type,
			color: colors[Math.floor(Math.random() * colors.length)],
			left: Math.random() * 100,
			top: Math.random() * 100,
			animationDelay: `${Math.random() * 15}s`,
			animationDuration: `${8 + Math.random() * 10}s`,
		}))
	)
}

// –•—É–∫ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —á–∏ —Ü–µ –º–æ–±—ñ–ª—å–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π
const useIsMobile = () => {
	const [isMobile, setIsMobile] = useState(false)

	useEffect(() => {
		const checkIsMobile = () => {
			setIsMobile(window.innerWidth <= 1024)
		}

		checkIsMobile()
		window.addEventListener('resize', checkIsMobile)

		return () => window.removeEventListener('resize', checkIsMobile)
	}, [])

	return isMobile
}

const courses = [
	{
		id: 'python',
		title: 'PYTHON',
		subtitle: '–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ',
		icon: 'üêç',
		description:
			'–í—ñ–¥–∫—Ä–∏–π –∫–æ—Å–º–æ—Å –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –∑ –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–æ—é –º–æ–≤–æ—é –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è —Å–≤—ñ—Ç—É. –°—Ç–≤–æ—Ä—é–π –®–Ü, –≤–µ–±-–¥–æ–¥–∞—Ç–∫–∏ —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É–π –¥–∞–Ω—ñ.',
		features: [
			'–û—Å–Ω–æ–≤–∏ Python',
			'–û–û–ü —Ç–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∏',
			'Django/Flask',
			'Data Science',
		],
		stats: {
			age: '8-17',
			students: '324+',
			projects: '20+',
		},
		badge: '–ö–æ—Å–º—ñ—á–Ω–∏–π —Ö—ñ—Ç',
		rating: 4.9,
		theme: 'themePython',
		particleColors: ['#c084fc', '#93c5fd', '#f9a8d4', '#fcd34d'],
        href: '/python',
	},
	{
		id: 'gamedev',
		title: '–ì–ï–ô–ú–î–ï–í',
		subtitle: '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–∏—Ö —ñ–≥–æ—Ä –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Unity',
		icon: 'üéÆ',
		description:
			'–†–æ–∑—Ä–æ–±–ª—è–π –∑–∞—Ö–æ–ø–ª—é—é—á—ñ —ñ–≥—Ä–∏ –Ω–∞ Unity. –í—ñ–¥ –ø—Ä–æ—Å—Ç–∏—Ö 2D –¥–æ —Å–∫–ª–∞–¥–Ω–∏—Ö 3D –ø—Ä–æ–µ–∫—Ç—ñ–≤.',
		features: ['C#', 'Unity 3D', '–î–∏–∑–∞–π–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤', '–õ–æ–≥—ñ–∫–∞ –≥–µ–π–º–ø–ª–µ—é'],
		stats: {
			duration: '8 –º—ñ—Å',
			age: '8-17',
			students: '189+',
			projects: '12+',
		},
		badge: '–¢—Ä–µ–Ω–¥ 2025',
		rating: 4.8,
		theme: 'themeGamedev',
		particleColors: ['#6ee7b7', '#5eead4', '#a7f3d0', '#34d399'],
        href: '/Unity',
	},
	{
		id: 'webdev',
		title: '–í–ï–ë-–†–û–ó–†–û–ë–ö–ê',
		subtitle: '–°—É—á–∞—Å–Ω—ñ —Å–∞–π—Ç–∏ —Ç–∞ –¥–æ–¥–∞—Ç–∫–∏',
		icon: 'üíª',
		description:
			'–°—Ç–≤–æ—Ä—é–π –∞–¥–∞–ø—Ç–∏–≤–Ω—ñ —Å–∞–π—Ç–∏ —Ç–∞ –≤–µ–±-–¥–æ–¥–∞—Ç–∫–∏ –∑ HTML, CSS, JavaScript —Ç–∞ React, —â–æ –≤—Ä–∞–∂–∞—é—Ç—å —Å–≤–æ—î—é —à–≤–∏–¥–∫—ñ—Å—Ç—é —Ç–∞ –¥–∏–∑–∞–π–Ω–æ–º.',
		features: ['HTML/CSS', 'JavaScript', 'React', 'Node.js'],
		stats: {
			age: '10-17',
			students: '156+',
			projects: '10+',
		},
		badge: '–ù–æ–≤–∏–Ω–∫–∞',
		rating: 4.9,
		theme: 'themeWebdev',
		particleColors: ['#7dd3fc', '#67e8f9', '#a5f3fc', '#38bdf8'],
        href: '/webDev',
	},
    {
        id: 'roblox',
        title: 'ROBLOX',
        subtitle: '–°—Ç–≤–æ—Ä—é–π —ñ–≥—Ä–∏ —É Roblox Studio',
        icon: 'üü•',
        description:
            '–ü–æ—Ä–∏–Ω—å —É —Å–≤—ñ—Ç –≥–µ–π–º–¥–∏–∑–∞–π–Ω—É —Ç–∞ —Å–∫—Ä–∏–ø—Ç–∏–Ω–≥—É –∑ Roblox Studio —ñ Lua. –°—Ç–≤–æ—Ä—é–π —Å–≤–æ—ó —Å–≤—ñ—Ç–∏, –º–µ—Ö–∞–Ω—ñ–∫–∏ —Ç–∞ –ø—É–±–ª—ñ–∫—É–π —ñ–≥—Ä–∏.',
        features: ['Roblox Studio', 'Lua', '–ì–µ–π–º–¥–∏–∑–∞–π–Ω', '–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è —ñ–≥–æ—Ä'],
        stats: {
            age: '6-17',
            students: '140+',
            projects: '8+',
        },
        badge: '–ü–æ–ø—É–ª—è—Ä–Ω–æ',
        rating: 4.8,
        theme: 'themeRoblox',
        particleColors: ['#fecaca', '#fca5a5', '#fb7185', '#f87171'],
        href: '/Roblox',
    },
]

// –û–∫—Ä–µ–º–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —á–∞—Å—Ç–∏–Ω–æ–∫, —â–æ–± –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
const ParticleBackground = ({ colors }) => {
	const particles = useMemo(() => generateParticles(colors), [colors])

	return (
		<div className={styles.particleContainer}>
			{particles.map(p => (
				<div
					key={p.id}
					className={`${styles.particle} ${styles[p.type]}`}
					style={{
						'--particle-color': p.color,
						left: `${p.left}%`,
						top: `${p.top}%`,
						animationDelay: p.animationDelay,
						animationDuration: p.animationDuration,
					}}
				/>
			))}
		</div>
	)
}

const EnhancedCourseCards = () => {
    const [hoveredCard, setHoveredCard] = useState(null)
	const [isVisible, setIsVisible] = useState(false)
	const router = useRouter()
	const isMobile = useIsMobile()
	const cardRefs = useRef([])

	useEffect(() => {
		const timer = setTimeout(() => setIsVisible(true), 100)
		return () => clearTimeout(timer)
	}, [])

    // –ù–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö –∫–∞—Ä—Ç–∫–∏ –Ω–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞—é—Ç—å—Å—è; –∫–ª—ñ–∫ –≤–µ–¥–µ –æ–¥—Ä–∞–∑—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∫—É—Ä—Å—É.

    const getExpandedCard = () => (isMobile ? null : hoveredCard)

	return (
		<div className={styles.wrapper}>
			{courses.map((course, index) => {
				const expandedCard = getExpandedCard()
				const isExpanded = expandedCard === index
				const isOtherExpanded = expandedCard !== null && !isExpanded

                const cardClasses = [
					styles.card,
					styles[course.theme],
					isVisible ? styles.cardVisible : styles.cardHidden,
					isExpanded ? styles.cardExpanded : '',
					isOtherExpanded ? styles.cardShrunk : '',
				].join(' ')

                return (
					<div
						key={course.id}
						ref={(el) => (cardRefs.current[index] = el)}
						className={cardClasses}
						style={{ transitionDelay: `${index * 100}ms` }}
                        onMouseEnter={() => !isMobile && setHoveredCard(index)}
                        onMouseLeave={() => !isMobile && setHoveredCard(null)}
                        onClick={() => {
                            router.push(course.href)
                        }}
                        role={'link'}
						tabIndex={0}
						onKeyDown={e => {
                            if (e.key === 'Enter' || e.key === ' ' || e.key === 'Spacebar') {
                                e.preventDefault()
                                router.push(course.href)
                            }
						}}
					>
                        {/* --- –§–û–ù –¢–ê –ï–§–ï–ö–¢–ò --- */}
                        <div className={styles.cardBackground}></div>
                        {!isMobile && <div className={styles.cardEffects}></div>}
                        {!isMobile && <ParticleBackground colors={course.particleColors} />}

						{/* --- –Ü–ù–¢–ï–†–ê–ö–¢–ò–í–ù–Ü –ï–õ–ï–ú–ï–ù–¢–ò –ü–†–ò –ù–ê–í–ï–î–ï–ù–ù–Ü --- */}
                        {!isMobile && (
                        <div
							className={`${styles.hoverElements} ${
								isExpanded ? styles.hoverElementsVisible : ''
							}`}
						>
							{course.id === 'python' && (
								<>
									<div className={`${styles.hoverElement} ${styles.pythonEl1}`}>
										‚≠ê
									</div>
									<div className={`${styles.hoverElement} ${styles.pythonEl2}`}>
										üöÄ
									</div>
									<div className={`${styles.hoverElement} ${styles.pythonEl3}`}>
										üåå
									</div>
								</>
							)}
							{course.id === 'gamedev' && (
								<>
									<div
										className={`${styles.hoverElement} ${styles.gamedevEl1}`}
									>
										üéØ
									</div>
									<div
										className={`${styles.hoverElement} ${styles.gamedevEl2}`}
									>
										üíé
									</div>
									<div
										className={`${styles.hoverElement} ${styles.gamedevEl3}`}
									>
										‚ö°
									</div>
								</>
							)}
							{course.id === 'webdev' && (
								<>
									<div className={`${styles.hoverElement} ${styles.webdevEl1}`}>
										&lt;div&gt;
									</div>
									<div className={`${styles.hoverElement} ${styles.webdevEl2}`}>
										{'{...}'}
									</div>
									<div className={`${styles.hoverElement} ${styles.webdevEl3}`}>
										‚öôÔ∏è
									</div>
								</>
							)}
                            {course.id === 'roblox' && (
                                <>
                                    <div className={`${styles.hoverElement} ${styles.robloxEl1}`}>
                                        üß±
                                    </div>
                                    <div className={`${styles.hoverElement} ${styles.robloxEl2}`}>
                                        üéÆ
                                    </div>
                                    <div className={`${styles.hoverElement} ${styles.robloxEl3}`}>
                                        üõ†Ô∏è
                                    </div>
                                </>
                            )}
                        </div>
                        )}

						{/* --- –í–ï–†–•–ù–Ø –ß–ê–°–¢–ò–ù–ê (–ë–ï–ô–î–ñ, –†–ï–ô–¢–ò–ù–ì) --- */}
						<div className={styles.topSection}>
							<div className={styles.rating}>
								<Star className={styles.ratingIcon} />
								<span className={styles.ratingValue}>{course.rating}</span>
							</div>
							<div
								className={`${styles.badge} ${styles[`badge_${course.id}`]}`}
							>
								üî• {course.badge}
							</div>
						</div>

						{/* --- –¶–ï–ù–¢–†–ê–õ–¨–ù–ê –Ü–ö–û–ù–ö–ê --- */}
						<div className={styles.centerIconWrapper}>
							<div
								className={`${styles.centerIcon} ${
									isExpanded ? styles.centerIconHovered : ''
								}`}
							>
								{course.icon}
							</div>
						</div>

						{/* --- –ù–ò–ñ–ù–Ü–ô –ö–û–ù–¢–ï–ù–¢ --- */}
						<div className={styles.bottomContent}>
							<div className={styles.titleWrapper}>
								<h3
									className={`${styles.title} ${
										isExpanded && course.id === 'python'
											? styles.titleCosmic
											: ''
									}`}
								>
									{course.title}
								</h3>
								<p className={styles.subtitle}>{course.subtitle}</p>
							</div>

                            {/* –ü–æ—Å—Ç—ñ–π–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É */}
                            <div className={styles.ctaRow}>
                                <Link
                                    href={course.href}
                                    className={styles.ctaButton}
                                    onClick={e => e.stopPropagation()}
                                >
                                    <span>–ü–µ—Ä–µ–π—Ç–∏</span>
                                    <ArrowRight className={styles.buttonArrow} />
                                </Link>
                            </div>

							{/* --- –î–ï–¢–ê–õ–Ü (–∑'—è–≤–ª—è—é—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ/—Å–∫—Ä–æ–ª—ñ) --- */}
							<div
								className={`${styles.details} ${
									isExpanded ? styles.detailsVisible : ''
								}`}
							>
								<p className={styles.description}>{course.description}</p>
								<div className={styles.featuresGrid}>
									{course.features.map((feature, i) => (
										<div key={i} className={styles.featureItem}>
											<CheckCircle className={styles.featureIcon} />
											<span>{feature}</span>
										</div>
									))}
								</div>
								<div className={styles.statsGrid}>
									<div className={styles.statItem}>
										<Users className={styles.statIcon} />
										<span>{course.stats.age} —Ä–æ–∫—ñ–≤</span>
									</div>
									<div className={styles.statItem}>
										<Eye className={styles.statIcon} />
										<span>{course.stats.students} —É—á–Ω—ñ–≤</span>
									</div>
									<div className={styles.statItem}>
										<Target className={styles.statIcon} />
										<span>{course.stats.projects} –ø—Ä–æ–µ–∫—Ç—ñ–≤</span>
									</div>
								</div>
                                <Link 
                                    href={course.href} 
                                    className={styles.actionButton}
                                    onClick={(e) => {
                                        e.preventDefault();
                                        e.stopPropagation();
                                        window.dispatchEvent(new Event('openContactModal'))
                                    }}
                                    scroll={false}
                                >
									<PlayCircle className={styles.buttonIcon} />
									<span>–ü–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è</span>
									<ArrowRight className={styles.buttonArrow} />
								</Link>
							</div>
						</div>

						{/* --- –ë–Ü–ß–ù–ê –ù–ê–ó–í–ê --- */}
						<div
							className={`${styles.sideLabel} ${
								isExpanded ? styles.sideLabelHovered : ''
							}`}
						>
							<span className={styles.sideLabelText}>{course.title}</span>
						</div>
					</div>
				)
			})}
		</div>
	)
}

export default EnhancedCourseCards