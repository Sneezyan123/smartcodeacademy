'use client'
import React, { useState, useEffect, useRef } from 'react'
import {
	ChevronLeft,
	ChevronRight,
	Code,
	Users,
	Award,
	Clock,
	CheckCircle,
	Play,
} from 'lucide-react'
import gsap from 'gsap'
import { ScrollTrigger } from 'gsap/ScrollTrigger'
import styles from './HeroSection.module.css'

// –†–µ—î—Å—Ç—Ä—É—î–º–æ ScrollTrigger
gsap.registerPlugin(ScrollTrigger)

const HeroSection = () => {
	const [currentSlide, setCurrentSlide] = useState(0)
	const [isVisible, setIsVisible] = useState(false)
	const heroRef = useRef(null)
	const slidesRef = useRef([])
	const contentRef = useRef(null)

	useEffect(() => {
		const timer = setTimeout(() => setIsVisible(true), 300)
		
		// GSAP –∞–Ω—ñ–º–∞—Ü—ñ—ó –≤—Ö–æ–¥—É
		if (heroRef.current) {
			gsap.fromTo(heroRef.current.querySelectorAll('.hero-title'),
				{ y: 50, opacity: 0 },
				{ 
					y: 0, 
					opacity: 1, 
					duration: 1, 
					ease: 'power3.out',
					stagger: 0.2,
					delay: 0.5
				}
			)
			
			gsap.fromTo(heroRef.current.querySelectorAll('.hero-subtitle'),
				{ y: 30, opacity: 0 },
				{ 
					y: 0, 
					opacity: 1, 
					duration: 0.8, 
					ease: 'power2.out',
					delay: 0.8
				}
			)
			
			gsap.fromTo(heroRef.current.querySelectorAll('.hero-button'),
				{ y: 20, opacity: 0, scale: 0.9 },
				{ 
					y: 0, 
					opacity: 1, 
					scale: 1,
					duration: 0.6, 
					ease: 'back.out(1.7)',
					stagger: 0.1,
					delay: 1.2
				}
			)
		}
		
		return () => clearTimeout(timer)
	}, [])

	// –ê–Ω—ñ–º–∞—Ü—ñ—è –∑–º—ñ–Ω–∏ —Å–ª–∞–π–¥—ñ–≤
	const animateSlideChange = (direction) => {
		if (!contentRef.current) return
		
		const timeline = gsap.timeline()
		
		// –ê–Ω—ñ–º–∞—Ü—ñ—è –≤–∏—Ö–æ–¥—É –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
		timeline.to(contentRef.current.querySelectorAll('.slide-content'), {
			x: direction === 'next' ? -50 : 50,
			opacity: 0,
			duration: 0.4,
			ease: 'power2.in',
			stagger: 0.05
		})
		
		// –ó–º—ñ–Ω–∞ —Å–ª–∞–π–¥—É
		timeline.call(() => {
			setCurrentSlide(prev => 
				direction === 'next' 
					? (prev + 1) % slides.length 
					: prev === 0 ? slides.length - 1 : prev - 1
			)
		})
		
		// –ê–Ω—ñ–º–∞—Ü—ñ—è –≤—Ö–æ–¥—É –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
		timeline.fromTo(contentRef.current.querySelectorAll('.slide-content'), 
			{ 
				x: direction === 'next' ? 50 : -50, 
				opacity: 0 
			},
			{
				x: 0,
				opacity: 1,
				duration: 0.6,
				ease: 'power3.out',
				stagger: 0.08
			}
		)
	}

	const slides = [
		{
			id: 'platform',
			title: '–°—É—á–∞—Å–Ω–∞ –Ω–∞–≤—á–∞–ª—å–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
			subtitle:
				'–í—Å–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–µ –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –∑—ñ–±—Ä–∞–Ω–æ –≤ –æ–¥–Ω–æ–º—É –º—ñ—Å—Ü—ñ',
			rightTitle: '–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è',
			rightContent:
				'–ù–∞–≤—á–∞–ª—å–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∑ –≤—ñ–¥–µ–æ—É—Ä–æ–∫–∞–º–∏, –ø—Ä–∞–∫—Ç–∏—á–Ω–∏–º–∏ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏, —Ç–µ—Å—Ç–∞–º–∏ —Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞–º–∏. –ü—Ä–æ–≥—Ä–µ—Å –≤—ñ–¥—Å—Ç–µ–∂—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.',
			features: [
				'–í—ñ–¥–µ–æ—É—Ä–æ–∫–∏ –≤—ñ–¥ –µ–∫—Å–ø–µ—Ä—Ç—ñ–≤',
				'–ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è',
				'–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–¥—É',
				'–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å',
			],
			mockupContent: {
				title: 'SmartCode Platform',
				subtitle: '–¢–≤—ñ–π —à–ª—è—Ö —É –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è',
				courses: [
					'Python Basics',
					'Web Development',
					'Game Creation',
					'Mobile Apps',
				],
				stats: {
					completed: 85,
					total: 120,
					level: 'Intermediate',
				},
				features: [
					'–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥—É',
					'–ú–∏—Ç—Ç—î–≤–∏–π —Ñ—ñ–¥–±–µ–∫',
					'–°–ø—ñ–ª—å–Ω–æ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤',
					'–°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏ –¥–æ—Å—è–≥–Ω–µ–Ω—å',
				],
			},
		},
		{
			id: 'mentorship',
			title: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏—Ü—Ç–≤–æ',
			subtitle:
				'–î–æ—Å–≤—ñ–¥—á–µ–Ω—ñ –º–µ–Ω—Ç–æ—Ä–∏ —Å—É–ø—Ä–æ–≤–æ–¥–∂—É—é—Ç—å –∫–æ–∂–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ —à–ª—è—Ö—É –¥–æ —É—Å–ø—ñ—Ö—É –≤ –Ü–¢',
			rightTitle: '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ 24/7',
			rightContent:
				'–ù–∞—à—ñ –º–µ–Ω—Ç–æ—Ä–∏ - –ø—Ä–∞–∫—Ç–∏–∫—É—é—á—ñ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∏ –∑ —Ç–æ–ø–æ–≤–∏—Ö –Ü–¢ –∫–æ–º–ø–∞–Ω—ñ–π. –í–æ–Ω–∏ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å –∑ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è.',
			features: [
				'–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –º–µ–Ω—Ç–æ—Ä',
				'–©–æ—Ç–∏–∂–Ω–µ–≤—ñ 1-–Ω–∞-1 —Å–µ—Å—ñ—ó',
				'–†–µ–≤ º—é –∫–æ–¥—É —Ç–∞ –ø—Ä–æ–µ–∫—Ç—ñ–≤',
				"–î–æ–ø–æ–º–æ–≥–∞ –∑ –∫–∞—Ä'—î—Ä–æ—é",
			],
			mockupContent: {
				title: 'Mentor Dashboard',
				subtitle: '–¢–≤—ñ–π –æ—Å–æ–±–∏—Å—Ç–∏–π –≥—ñ–¥',
				courses: ['Code Review', 'Career Advice', 'Project Help', 'Live Q&A'],
				stats: {
					completed: 92,
					total: 100,
					level: 'Advanced',
				},
				features: [
					'–í—ñ–¥–µ–æ–¥–∑–≤—ñ–Ω–∫–∏ –∑ –º–µ–Ω—Ç–æ—Ä–æ–º',
					'–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω –Ω–∞–≤—á–∞–Ω–Ω—è',
					'–†–µ–≤ º—é –¥–æ–º–∞—à–Ω—ñ—Ö –∑–∞–≤–¥–∞–Ω—å',
					'–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ —Å–ø—ñ–≤–±–µ—Å—ñ–¥',
				],
			},
		},
		{
			id: 'community',
			title: '–ê–∫—Ç–∏–≤–Ω–∞ —Å–ø—ñ–ª—å–Ω–æ—Ç–∞ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤',
			subtitle:
				'–ù–∞–≤—á–∞–π—Å—è —Ä–∞–∑–æ–º –∑ –æ–¥–Ω–æ–ª—ñ—Ç–∫–∞–º–∏, —Å—Ç–≤–æ—Ä—é–π –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ –ø—Ä–∞—Ü—é–π –Ω–∞–¥ —Ü—ñ–∫–∞–≤–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏',
			rightTitle: '–ö–æ–º–∞–Ω–¥–Ω–∞ —Ä–æ–±–æ—Ç–∞',
			rightContent:
				'–°—Ç—É–¥–µ–Ω—Ç–∏ –ø—Ä–∞—Ü—é—é—Ç—å –≤ –∫–æ–º–∞–Ω–¥–∞—Ö –Ω–∞–¥ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏, –æ—Ç—Ä–∏–º—É—é—Ç—å –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏ –∑ Git, Agile —Ç–∞ —ñ–Ω—à–∏–º–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏.',
			features: [
				'–ö–æ–º–∞–Ω–¥–Ω—ñ –ø—Ä–æ–µ–∫—Ç–∏',
				'–•–∞–∫–∞—Ç–æ–Ω–∏ —Ç–∞ –∑–º–∞–≥–∞–Ω–Ω—è',
				'–ù–µ—Ç–≤–æ—Ä–∫—ñ–Ω–≥ –ø–æ–¥—ñ—ó',
				'–°–ø—ñ–ª—å–Ω–∏–π —á–∞—Ç 24/7',
			],
			mockupContent: {
				title: 'Community Hub',
				subtitle: '–†–∞–∑–æ–º –¥–æ —É—Å–ø—ñ—Ö—É',
				courses: [
					'Team Projects',
					'Hackathons',
					'Code Challenges',
					'Study Groups',
				],
				stats: {
					completed: 78,
					total: 95,
					level: 'Team Leader',
				},
				features: [
					'–ö–æ–º–∞–Ω–¥–Ω–∞ —Ä–æ–∑—Ä–æ–±–∫–∞',
					'Peer code review',
					'–°–ø—ñ–ª—å–Ω—ñ –ø—Ä–æ–µ–∫—Ç–∏',
					'–ú–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ –æ–¥–∏–Ω –æ–¥–Ω–æ–≥–æ',
				],
			},
		},
	]

	const nextSlide = () => {
		animateSlideChange('next')
	}

	const prevSlide = () => {
		animateSlideChange('prev')
	}

	const currentSlideData = slides[currentSlide]

	return (
		<section className={styles.heroSection} ref={heroRef}>
			<div className={styles.container}>
				<div
					className={`${styles.content} ${
						isVisible ? styles.contentVisible : ''
					}`}
					ref={contentRef}
				>
					{/* –õ—ñ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
					<div className={styles.leftContent}>
						<div className={styles.slideInfo}>
							<div className={styles.slideNumber}>
								0{currentSlide + 1} / 0{slides.length}
							</div>
							<div className={styles.slideCategory}>–û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ</div>
						</div>

						<h1 className={`${styles.title} hero-title`}>{currentSlideData.title}</h1>
						<p className={`${styles.subtitle} hero-subtitle`}>{currentSlideData.subtitle}</p>

						<div className={styles.features}>
							{currentSlideData.features.map((feature, index) => (
								<div key={index} className={styles.feature}>
									<CheckCircle className={styles.featureIcon} />
									<span>{feature}</span>
								</div>
							))}
						</div>

						<div className={styles.leftActions}>
							<button className={`${styles.primaryButton} hero-button`}>
								<Play className={styles.buttonIcon} />
								–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ
							</button>
						</div>
					</div>

					{/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π –º–æ–∫–∞–ø */}
					<div className={styles.centerContent}>
						<div className={styles.mockupContainer}>
							<div className={styles.deviceFrame}>
								<div className={styles.screen}>
									<div className={styles.browser}>
										<div className={styles.browserHeader}>
											<div className={styles.browserButtons}>
												<span className={styles.btnClose}></span>
												<span className={styles.btnMinimize}></span>
												<span className={styles.btnMaximize}></span>
											</div>
											<div className={styles.urlBar}>smartcode-academy.com</div>
										</div>

										<div className={styles.browserContent}>
											<div className={styles.sidebar}>
												<div className={styles.logo}>
													<div className={styles.logoIcon}>üíª</div>
													<span>{currentSlideData.mockupContent.title}</span>
												</div>

												<nav className={styles.nav}>
													<div className={styles.navItem}>
														<Code className={styles.navIcon} />
														–ö—É—Ä—Å–∏
													</div>
													<div className={styles.navItem}>
														<Users className={styles.navIcon} />
														–°–ø—ñ–ª—å–Ω–æ—Ç–∞
													</div>
													<div className={styles.navItem}>
														<Award className={styles.navIcon} />
														–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è
													</div>
													<div className={styles.navItem}>
														<Clock className={styles.navIcon} />
														–ü—Ä–æ–≥—Ä–µ—Å
													</div>
												</nav>
											</div>

											<div className={styles.mainContent}>
												<div className={styles.header}>
													<h3>{currentSlideData.mockupContent.subtitle}</h3>
													<div className={styles.userProgress}>
														<div className={styles.progressBar}>
															<div
																className={styles.progressFill}
																style={{
																	width: `${
																		(currentSlideData.mockupContent.stats
																			.completed /
																			currentSlideData.mockupContent.stats
																				.total) *
																		100
																	}%`,
																}}
															></div>
														</div>
														<span className={styles.progressText}>
															{currentSlideData.mockupContent.stats.completed}/
															{currentSlideData.mockupContent.stats.total}
														</span>
													</div>
												</div>

												<div className={styles.coursesGrid}>
													{currentSlideData.mockupContent.courses.map(
														(course, index) => (
															<div key={index} className={styles.courseCard}>
																<div className={styles.courseStatus}></div>
																<div className={styles.courseContent}>
																	<div className={styles.courseIcon}>üöÄ</div>
																	<span className={styles.courseName}>
																		{course}
																	</span>
																</div>
															</div>
														)
													)}
												</div>

												<div className={styles.featuresList}>
													{currentSlideData.mockupContent.features.map(
														(feature, index) => (
															<div key={index} className={styles.featureItem}>
																<CheckCircle className={styles.checkIcon} />
																{feature}
															</div>
														)
													)}
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>

						{/* –ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ –∫–Ω–æ–ø–∫–∏ */}
						<button className={styles.navButton} onClick={prevSlide}>
							<ChevronLeft className={styles.navIcon} />
						</button>
						<button
							className={`${styles.navButton} ${styles.navButtonRight}`}
							onClick={nextSlide}
						>
							<ChevronRight className={styles.navIcon} />
						</button>
					</div>

					{/* –ü—Ä–∞–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
					<div className={styles.rightContent}>
						<h2 className={`${styles.rightTitle} slide-content`}>{currentSlideData.rightTitle}</h2>
						<p className={`${styles.rightText} slide-content`}>{currentSlideData.rightContent}</p>

						<div className={styles.rightStats}>
							<div className={styles.stat}>
								<div className={styles.statNumber}>500+</div>
								<div className={styles.statLabel}>–°—Ç—É–¥–µ–Ω—Ç—ñ–≤</div>
							</div>
							<div className={styles.stat}>
								<div className={styles.statNumber}>95%</div>
								<div className={styles.statLabel}>–ó–∞–¥–æ–≤–æ–ª–µ–Ω–∏—Ö</div>
							</div>
						</div>

						<button className={styles.secondaryButton}>–î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ</button>
					</div>
				</div>

				{/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ —Å–ª–∞–π–¥—ñ–≤ */}
				<div className={styles.slideIndicators}>
					{slides.map((_, index) => (
						<button
							key={index}
							className={`${styles.indicator} ${
								index === currentSlide ? styles.active : ''
							}`}
							onClick={() => {
						if (index !== currentSlide) {
							animateSlideChange(index > currentSlide ? 'next' : 'prev')
						}
					}}
						/>
					))}
				</div>
			</div>
		</section>
	)
}

export default HeroSection
