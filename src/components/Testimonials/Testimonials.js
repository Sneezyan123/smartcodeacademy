'use client'

import React, { useState, useEffect, useRef } from 'react'
import {
	Star,
	Quote,
	ChevronLeft,
	ChevronRight,
	Users,
	Heart,
} from 'lucide-react'
import gsap from 'gsap'
import { ScrollTrigger } from 'gsap/ScrollTrigger'
import styles from './Testimonials.module.css' // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ CSS –º–æ–¥—É–ª—å
// –†–µ—î—Å—Ç—Ä—É—î–º–æ –ø–ª–∞–≥—ñ–Ω ScrollTrigger –¥–ª—è GSAP
gsap.registerPlugin(ScrollTrigger)

// --- –î–ê–ù–Ü ---
const testimonials = [
	{
		id: 1,
		name: '–ö–æ—Å—Ç—è –ì–æ—Ä—ñ–ª–æ–≤',
		age: 16,
		position: '–í–∏–ø—É—Å–∫–Ω–∏–∫ SmartCode Academy',
		rating: 5,
		text: 'SmartCode Academy - —Ü–µ –Ω–∞–π–∫—Ä–∞—â–∞ —à–∫–æ–ª–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è. –ó–∞–≤–¥—è–∫–∏ —è–∫—ñ—Å–Ω–æ–º—É –Ω–∞–≤—á–∞–Ω–Ω—é —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º—Ü—ñ –º–µ–Ω—Ç–æ—Ä—ñ–≤ —è –∑–º—ñ–≥ –æ—Å–≤–æ—ó—Ç–∏ Python —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤—ñ–π –ø–µ—Ä—à–∏–π –¥–æ–¥–∞—Ç–æ–∫.',
		avatar: 'üë®‚Äçüíª',
		course: 'Python & Web Development',
		duration: '8 –º—ñ—Å—è—Ü—ñ–≤',
		achievement: '–°—Ç–≤–æ—Ä–∏–≤ –≤–ª–∞—Å–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫',
		color: 'blue',
	},
	{
		id: 2,
		name: '–ê–Ω–∞—Å—Ç–∞—Å—ñ—è –°—É—Ö–∞–Ω–æ–≤–∞',
		age: 15,
		position: '–í–∏–ø—É—Å–∫–Ω–∏—Ü—è SmartCode Academy',
		rating: 5,
		text: '–ù–∞–≤—á–∞–Ω–Ω—è –≤ SmartCode Academy –∑–º—ñ–Ω–∏–ª–æ –º–æ—î –∂–∏—Ç—Ç—è. –¢—É—Ç —è –Ω–µ —Ç—ñ–ª—å–∫–∏ –≤–∏–≤—á–∏–ª–∞ HTML, CSS —Ç–∞ JavaScript, –∞–ª–µ –π –Ω–∞–≤—á–∏–ª–∞—Å—è –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥—ñ.',
		avatar: 'üë©‚Äçüíª',
		course: 'Frontend Development',
		duration: '6 –º—ñ—Å—è—Ü—ñ–≤',
		achievement: '–ó–∞–ø—É—Å—Ç–∏–ª–∞ –≤–ª–∞—Å–Ω–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ',
		color: 'purple',
	},
	{
		id: 3,
		name: '–ë–æ–≥–¥–∞–Ω –Ø—Ä–µ–º—á—É–∫',
		age: 14,
		position: '–°—Ç—É–¥–µ–Ω—Ç SmartCode Academy',
		rating: 5,
		text: '–í SmartCode Academy —è –∑–Ω–∞–π—à–æ–≤ –¥—Ä—É–∑—ñ–≤-–æ–¥–Ω–æ–¥—É–º—Ü—ñ–≤ —Ç–∞ —Å—Ç–≤–æ—Ä–∏–≤ —Å–≤–æ—é –ø–µ—Ä—à—É –≥—Ä—É –≤ Unity. –í–∏–∫–ª–∞–¥–∞—á—ñ –∑–∞–≤–∂–¥–∏ –≥–æ—Ç–æ–≤—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏, –∞ –Ω–∞–≤—á–∞–ª—å–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥—É–∂–µ –∑—Ä—É—á–Ω–∞. –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å—ñ–º, —Ö—Ç–æ —Ö–æ—á–µ —Å—Ç–∞—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–æ–º!',
		avatar: 'üë®‚Äçüéì',
		course: 'Game Development',
		duration: '10 –º—ñ—Å—è—Ü—ñ–≤',
		achievement: '1-–µ –º—ñ—Å—Ü–µ –Ω–∞ —Ö–∞–∫–∞—Ç–æ–Ω—ñ',
		color: 'green',
	},
	{
		id: 4,
		name: '–í–ª–∞–¥ –®—É–ª—å–∂–µ–Ω–∫–æ',
		age: 17,
		position: '–í–∏–ø—É—Å–∫–Ω–∏–∫ SmartCode Academy',
		rating: 5,
		text: '–ó–∞–≤–¥—è–∫–∏ SmartCode Academy —è –≤—Å—Ç—É–ø–∏–≤ –¥–æ —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É –∑ –≤—ñ–¥–º—ñ–Ω–Ω–æ—é –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–æ—é. –ó–Ω–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è, —è–∫—ñ —è –æ—Ç—Ä–∏–º–∞–≤ —Ç—É—Ç, –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å –º–µ–Ω—ñ –±—É—Ç–∏ –∫—Ä–∞—â–∏–º –∑–∞ –æ–¥–Ω–æ–∫—É—Ä—Å–Ω–∏–∫—ñ–≤. –î—É–∂–µ –≤–¥—è—á–Ω–∏–π –∑–∞ —è–∫—ñ—Å–Ω—É –æ—Å–≤—ñ—Ç—É!',
		avatar: 'üßë‚Äçüíª',
		course: 'Full-Stack Development',
		duration: '12 –º—ñ—Å—è—Ü—ñ–≤',
		achievement: '–í—Å—Ç—É–ø –¥–æ –¢–û–ü –í–ù–ó',
		color: 'orange',
	},
	{
		id: 5,
		name: '–ì–∞–ª–∏–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
		age: 13,
		position: '–°—Ç—É–¥–µ–Ω—Ç–∫–∞ SmartCode Academy',
		rating: 5,
		text: '–ú–µ–Ω—ñ 13 —Ä–æ–∫—ñ–≤, –∞–ª–µ –∑–∞–≤–¥—è–∫–∏ SmartCode Academy —è –≤–∂–µ —Å—Ç–≤–æ—Ä—é—é –≤–ª–∞—Å–Ω—ñ –ø—Ä–æ–µ–∫—Ç–∏! –û—Å–æ–±–ª–∏–≤–æ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è —Ä–æ–±–æ—Ç–∞ –∑ –º–µ–Ω—Ç–æ—Ä–æ–º - –≤—ñ–Ω –∑–∞–≤–∂–¥–∏ –ø–æ—è—Å–Ω–∏—Ç—å —Å–∫–ª–∞–¥–Ω—ñ –º–æ–º–µ–Ω—Ç–∏ –ø—Ä–æ—Å—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.',
		avatar: 'üë©‚Äçüéì',
		course: 'Python for Kids',
		duration: '4 –º—ñ—Å—è—Ü—ñ',
		achievement: '–ù–∞–π–º–æ–ª–æ–¥—à–∏–π –≤–∏–ø—É—Å–∫–Ω–∏–∫',
		color: 'pink',
	},
]

const stats = [
	{
		number: '500+',
		label: '–í–∏–ø—É—Å–∫–Ω–∏–∫—ñ–≤',
		icon: <Users size={24} />,
		color: 'blue',
	},
	{
		number: '4.9/5',
		label: '–†–µ–π—Ç–∏–Ω–≥',
		icon: <Star size={24} />,
		color: 'yellow',
	},
	{
		number: '95%',
		label: '–ó–∞–¥–æ–≤–æ–ª–µ–Ω–∏—Ö',
		icon: <Heart size={24} />,
		color: 'red',
	},
	
]

// --- –î–û–ü–û–ú–Ü–ñ–ù–Ü –ö–û–ú–ü–û–ù–ï–ù–¢–ò ---
const RatingStars = ({ rating, className = '' }) => (
	<div className={`${styles.ratingStars} ${className}`}>
		{Array.from({ length: 5 }, (_, i) => (
			<Star
				key={i}
				size={18}
				className={i < rating ? styles.starFilled : styles.starEmpty}
				fill='currentColor'
			/>
		))}
	</div>
)

// --- –û–°–ù–û–í–ù–ò–ô –ö–û–ú–ü–û–ù–ï–ù–¢ ---
const Testimonials = () => {
	const [currentTestimonial, setCurrentTestimonial] = useState(0)
	const sectionRef = useRef(null)
	const testimonialCardRef = useRef(null) // Ref –Ω–∞ –≤—Å—é –∫–∞—Ä—Ç–∫—É
	const timelineRef = useRef(null)

	// –ê–Ω—ñ–º–∞—Ü—ñ—ó –ø—Ä–∏ –ø–µ—Ä—à—ñ–π –ø–æ—è–≤—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
	useEffect(() => {
		const section = sectionRef.current
		if (!section) return

		// –ü–ª–∞–≤–Ω–∞ –ø–æ—è–≤–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑–∞–≥–æ–ª–æ–≤–∫—É
		gsap.fromTo(
			section.querySelectorAll('.gsap-fade-up'),
			{ y: 50, opacity: 0 },
			{
				y: 0,
				opacity: 1,
				duration: 0.8,
				ease: 'power3.out',
				stagger: 0.15,
				scrollTrigger: {
					trigger: section,
					start: 'top 80%',
					toggleActions: 'play none none reverse',
				},
			}
		)

		// –ü–ª–∞–≤–Ω–∞ –ø–æ—è–≤–∞ –∫–∞—Ä—Ç–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
		gsap.fromTo(
			section.querySelectorAll('.gsap-stat-card'),
			{ scale: 0.8, opacity: 0, y: 30 },
			{
				scale: 1,
				opacity: 1,
				y: 0,
				duration: 0.6,
				ease: 'back.out(1.7)',
				stagger: 0.1,
				scrollTrigger: {
					trigger: `.${styles.statsGrid}`,
					start: 'top 85%',
					toggleActions: 'play none none reverse',
				},
			}
		)
	}, [])

	// –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∞–Ω—ñ–º–∞—Ü—ñ—ó –∑–º—ñ–Ω–∏ –≤—ñ–¥–≥—É–∫—É
	const animateTestimonialChange = newIndex => {
		if (
			newIndex === currentTestimonial ||
			(timelineRef.current && timelineRef.current.isActive())
		) {
			return
		}

		const card = testimonialCardRef.current
		if (!card) return

		// –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–æ—á—ñ—Ä–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏, —è–∫—ñ –±—É–¥–µ–º–æ –∞–Ω—ñ–º—É–≤–∞—Ç–∏
		const contentToAnimate = card.querySelector(
			`.${styles.testimonialContentWrapper}`
		)

		timelineRef.current = gsap.timeline({
			// –ö–æ–ª–±–µ–∫ onComplete —Ç–µ–ø–µ—Ä –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ç—É—Ç –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
		})

		timelineRef.current
			// 1. –ê–Ω—ñ–º—É—î–º–æ –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
			.to(contentToAnimate, {
				opacity: 0,
				y: -25,
				duration: 0.4,
				ease: 'expo.in',
			})
			// 2. –û–ù–û–í–õ–Æ–Ñ–ú–û –°–¢–ê–ù –í –°–ï–†–ï–î–ò–ù–Ü –ê–ù–Ü–ú–ê–¶–Ü–á - —Ü–µ –≤–∏–ø—Ä–∞–≤–ª—è—î –±–∞–≥
			.call(() => {
				setCurrentTestimonial(newIndex)
			})
			// 3. –ì–æ—Ç—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–æ –ø–æ—è–≤–∏ (–≤–æ–Ω–∏ –±—É–¥—É—Ç—å –Ω–µ–≤–∏–¥–∏–º—ñ —Ç–∞ –∑–º—ñ—â–µ–Ω—ñ)
			.set(contentToAnimate.children, {
				opacity: 0,
				y: 25,
			})
			// 4. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É –≤–∏–¥–∏–º–∏–π —Å—Ç–∞–Ω
			.set(contentToAnimate, {
				opacity: 1,
				y: 0,
			})
			// 5. –ê–Ω—ñ–º—É—î–º–æ –ø–æ—è–≤—É –Ω–æ–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ —á–µ—Ä–∑—ñ (stagger)
			.to(contentToAnimate.children, {
				opacity: 1,
				y: 0,
				duration: 0.5,
				ease: 'power3.out',
				stagger: 0.08, // –ö–ª—é—á –¥–æ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ–≥–æ –≤–∏–≥–ª—è–¥—É!
			})
	}

	const handleNext = () => {
		animateTestimonialChange((currentTestimonial + 1) % testimonials.length)
	}

	const handlePrev = () => {
		animateTestimonialChange(
			(currentTestimonial - 1 + testimonials.length) % testimonials.length
		)
	}

	const handleIndicatorClick = index => {
		animateTestimonialChange(index)
	}

	const currentData = testimonials[currentTestimonial]

	// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä—è–¥–∫–∞ –∑ –∫–ª–∞—Å–∞–º–∏ –∫–æ–ª—å–æ—Ä—ñ–≤
	const getColorClasses = color => {
		const colorName = color.charAt(0).toUpperCase() + color.slice(1)
		return {
			badge: styles[`badge${colorName}`],
			titleAccent: styles[`titleAccent${colorName}`],
			cardBorder: styles[`cardBorder${colorName}`],
			avatarBg: styles[`avatarBg${colorName}`],
			positionText: styles[`positionText${colorName}`],
			tag: styles[`tag${colorName}`],
			navButton: styles[`navButton${colorName}`],
			indicatorActive: styles[`indicatorActive${colorName}`],
			avatarButtonActive: styles[`avatarButtonActive${colorName}`],
		}
	}

	const currentTheme = getColorClasses(currentData.color)

	return (
		<section ref={sectionRef} className={styles.testimonialsSection}>
			<div className={styles.container}>
				<div className={styles.header}>
					<div className={`gsap-fade-up ${styles.badge} ${currentTheme.badge}`}>
						<Quote size={16} />
						<span>–í—ñ–¥–≥—É–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤</span>
					</div>
					<h2 className={`gsap-fade-up ${styles.title}`}>
						–Ü—Å—Ç–æ—Ä—ñ—ó —É—Å–ø—ñ—Ö—É –Ω–∞—à–∏—Ö{' '}
						<span
							className={`${styles.titleAccent} ${currentTheme.titleAccent}`}
						>
							–≤–∏–ø—É—Å–∫–Ω–∏–∫—ñ–≤
						</span>
					</h2>
					<p className={`gsap-fade-up ${styles.subtitle}`}>
						–î—ñ–∑–Ω–∞–π—Ç–µ—Å—è, —è–∫ SmartCode Academy –∑–º—ñ–Ω–∏–ª–∞ –∂–∏—Ç—Ç—è —Å–æ—Ç–µ–Ω—å –¥—ñ—Ç–µ–π —Ç–∞
						–ø—ñ–¥–ª—ñ—Ç–∫—ñ–≤.
					</p>
				</div>

				<div className={styles.contentGrid}>
					<div ref={testimonialCardRef} className={styles.testimonialCard}>
						<div
							className={`${styles.cardBorder} ${currentTheme.cardBorder}`}
						></div>

						{/* –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±–≥–æ—Ä—Ç–∫—É –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É, —â–æ–± –∞–Ω—ñ–º—É–≤–∞—Ç–∏ –π–æ–≥–æ */}
						<div className={styles.testimonialContentWrapper}>
							<div className={styles.cardHeader}>
								<div className={`${styles.avatar} ${currentTheme.avatarBg}`}>
									{currentData.avatar}
								</div>
								<div className={styles.authorInfo}>
									<h3 className={styles.authorName}>
										{currentData.name}, {currentData.age} —Ä–æ–∫—ñ–≤
									</h3>
									<p
										className={`${styles.authorPosition} ${currentTheme.positionText}`}
									>
										{currentData.position}
									</p>
								</div>
								<RatingStars
									rating={currentData.rating}
									className={styles.ratingStarsWrapper}
								/>
							</div>

							<div className={styles.testimonialBody}>
								<Quote
									size={48}
									className={`${styles.quoteIcon} ${currentTheme.positionText}`}
								/>
								<p className={styles.testimonialText}>&quot;{currentData.text}&quot;</p>
							</div>

							<div className={styles.cardFooter}>
								<span className={`${styles.tag} ${currentTheme.tag}`}>
									üìö {currentData.course}
								</span>
								<span className={`${styles.tag} ${styles.tagSlate}`}>
									‚è±Ô∏è {currentData.duration}
								</span>
								<span className={`${styles.tag} ${styles.tagGreen}`}>
									üèÜ {currentData.achievement}
								</span>
							</div>
						</div>

						<div className={styles.cardNavigation}>
							<button
								onClick={handlePrev}
								aria-label='–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤—ñ–¥–≥—É–∫'
								className={styles.navButton}
							>
								<ChevronLeft size={20} />
							</button>
							<button
								onClick={handleNext}
								aria-label='–ù–∞—Å—Ç—É–ø–Ω–∏–π –≤—ñ–¥–≥—É–∫'
								className={`${styles.navButton} ${styles.navButtonColored} ${currentTheme.navButton}`}
							>
								<ChevronRight size={20} />
							</button>
						</div>
					</div>

					<div className={`${styles.statsGrid} stats-grid`}>
						{stats.map((stat, index) => (
							<div
								key={index}
								className={`gsap-stat-card ${styles.statCard} ${
									styles[
										`statCard${
											stat.color.charAt(0).toUpperCase() + stat.color.slice(1)
										}`
									]
								}`}
							>
								<div className={styles.statContent}>
									<div className={styles.statIconWrapper}>{stat.icon}</div>
									<div>
										<div className={styles.statNumber}>{stat.number}</div>
										<div className={styles.statLabel}>{stat.label}</div>
									</div>
								</div>
							</div>
						))}
					</div>
				</div>

				<div className={styles.bottomNav}>
					<div className={styles.indicatorGroup}>
						{testimonials.map((_, index) => (
							<button
								key={index}
								onClick={() => handleIndicatorClick(index)}
								aria-label={`–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≤—ñ–¥–≥—É–∫—É ${index + 1}`}
								className={`${styles.indicator} ${
									currentTestimonial === index
										? `${styles.indicatorActive} ${currentTheme.indicatorActive}`
										: ''
								}`}
							/>
						))}
					</div>
					<div className={styles.avatarGroup}>
						{testimonials.map((testimonial, index) => (
							<button
								key={testimonial.id}
								onClick={() => handleIndicatorClick(index)}
								aria-label={`–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≤—ñ–¥–≥—É–∫—É ${testimonial.name}`}
								className={`${styles.avatarButton} ${
									currentTestimonial === index
										? `${styles.avatarButtonActive} ${
												getColorClasses(testimonial.color).avatarButtonActive
										  }`
										: ''
								}`}
							>
								<span>{testimonial.avatar}</span>
							</button>
						))}
					</div>
				</div>
			</div>
		</section>
	)
}

export default Testimonials
