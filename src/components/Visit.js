'use client'
import React, { useState, useEffect, useRef } from 'react'
import {
	Users,
	Monitor,
	Gamepad2,
	Code,
	Palette,
	ChevronDown,
	Cpu,
	Zap,
	Rocket,
	Play,
	Star,
	Award,
	Clock,
	BookOpen,
	Trophy,
	TrendingUp,
} from 'lucide-react'
import gsap from 'gsap'
import { ScrollTrigger } from 'gsap/ScrollTrigger'
import styles from './Visit.module.css'

// –†–µ—î—Å—Ç—Ä—É—î–º–æ ScrollTrigger
gsap.registerPlugin(ScrollTrigger)

const Visit = () => {
	const [isVisible, setIsVisible] = useState(false)
	const [hoveredCard, setHoveredCard] = useState(null)
	const [currentStat, setCurrentStat] = useState(0)
	const sectionRef = useRef(null)
	const cardsRef = useRef(null)

	useEffect(() => {
		setIsVisible(true)

		// GSAP –∞–Ω—ñ–º–∞—Ü—ñ—ó –ø–æ—è–≤–∏ –ø—Ä–∏ —Å–∫—Ä–æ–ª—ñ
		if (sectionRef.current) {
			gsap.fromTo(
				sectionRef.current.querySelectorAll('.animate-up'),
				{ y: 60, opacity: 0 },
				{
					y: 0,
					opacity: 1,
					duration: 0.8,
					ease: 'power3.out',
					stagger: 0.15,
					scrollTrigger: {
						trigger: sectionRef.current,
						start: 'top 85%',
						end: 'bottom 15%',
						toggleActions: 'play none none reverse',
					},
				}
			)

			gsap.fromTo(
				sectionRef.current.querySelectorAll('.animate-slide'),
				{ x: -60, opacity: 0 },
				{
					x: 0,
					opacity: 1,
					duration: 0.7,
					ease: 'power2.out',
					stagger: 0.1,
					scrollTrigger: {
						trigger: sectionRef.current,
						start: 'top 75%',
						toggleActions: 'play none none reverse',
					},
				}
			)

			gsap.fromTo(
				sectionRef.current.querySelectorAll('.animate-scale'),
				{ scale: 0.8, opacity: 0 },
				{
					scale: 1,
					opacity: 1,
					duration: 0.6,
					ease: 'back.out(1.7)',
					stagger: 0.05,
					scrollTrigger: {
						trigger: sectionRef.current,
						start: 'top 80%',
						toggleActions: 'play none none reverse',
					},
				}
			)
		}

		// –ê–Ω—ñ–º–∞—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
		const interval = setInterval(() => {
			setCurrentStat(prev => (prev + 1) % 8)
		}, 3000)

		return () => clearInterval(interval)
	}, [])

	const stats = [
		{ number: '500+', label: '–≤–í–∏–ø—É—Å–∫–Ω–∏–∫—ñ', icon: <Users /> },
		{ number: '95%', label: '–ü—Ä–∞—Ü–µ–≤–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', icon: <Award /> },
		{ number: '3+', label: '–†–æ–∫–∏ –¥–æ—Å–≤—ñ–¥—É', icon: <Clock /> },
		{ number: '4.9', label: '–†–µ–π—Ç–∏–Ω–≥', icon: <Star /> },
		{ number: '8+', label: '–ö—É—Ä—Å—ñ–≤', icon: <BookOpen /> },
		{ number: '15+', label: '–í–∏–∫–ª–∞–¥–∞—á—ñ–≤', icon: <Monitor /> },
		{ number: '20+', label: '–ü—Ä–æ–µ–∫—Ç—ñ–≤', icon: <Rocket /> },
		{ number: '98%', label: '–ó–∞–¥–æ–≤–æ–ª–µ–Ω–∏—Ö —É—á–Ω—ñ–≤', icon: <Trophy /> },
	]

	const courses = [
		{
			id: 'programming',
			title: '–ü–†–û–ì–†–ê–ú–£–í–ê–ù–ù–Ø',
			subtitle: '–û—Å–Ω–æ–≤–∏ –∫–æ–¥—É–≤–∞–Ω–Ω—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ',
			icon: <Code className={styles.courseIcon} />,
			description: 'Python, JavaScript, –∞–ª–≥–æ—Ä–∏—Ç–º–∏ —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö',
			gradient: 'programming',
			features: ['–ó–º—ñ–Ω–Ω—ñ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó', '–£–º–æ–≤–∏ —Ç–∞ —Ü–∏–∫–ª–∏', '–†–µ–∞–ª—å–Ω—ñ –ø—Ä–æ–µ–∫—Ç–∏'],
			duration: '6 –º—ñ—Å—è—Ü—ñ–≤',
			age: '10-16 —Ä–æ–∫—ñ–≤',
			elements: [
				{
					type: 'code',
					content: 'def hello():',
					x: '15%',
					y: '25%',
					delay: '0s',
				},
				{
					type: 'code',
					content: '  print("–ü—Ä–∏–≤—ñ—Ç!")',
					x: '20%',
					y: '35%',
					delay: '0.5s',
				},
				{ type: 'code', content: 'hello()', x: '15%', y: '45%', delay: '1s' },
				{
					type: 'icon',
					content: <Cpu className={styles.elementIcon} />,
					x: '70%',
					y: '30%',
					delay: '1.5s',
				},
				{
					type: 'bracket',
					content: '{ }',
					x: '65%',
					y: '60%',
					delay: '2s',
				},
			],
		},
		{
			id: 'games',
			title: '–ì–ï–ô–ú–î–ï–í',
			subtitle: '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–∏—Ö —ñ–≥–æ—Ä',
			icon: <Gamepad2 className={styles.courseIcon} />,
			description: 'Unity, Scratch, Roblox Studio - –≤—ñ–¥ —ñ–¥–µ—ó –¥–æ —Ä–µ–ª—ñ–∑—É',
			gradient: 'games',
			features: [
				'–ü–µ—Ä—Å–æ–Ω–∞–∂—ñ —Ç–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è',
				'–õ–æ–≥—ñ–∫–∞ —Ç–∞ –º–µ—Ö–∞–Ω—ñ–∫–∏',
				'–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è —ñ–≥–æ—Ä',
			],
			duration: '8 –º—ñ—Å—è—Ü—ñ–≤',
			age: '8-17 —Ä–æ–∫—ñ–≤',
			elements: [
				{
					type: 'game-element',
					content: 'üéØ',
					x: '25%',
					y: '25%',
					delay: '0s',
				},
				{
					type: 'game-element',
					content: '‚≠ê',
					x: '70%',
					y: '20%',
					delay: '0.5s',
				},
				{
					type: 'game-element',
					content: 'üöÄ',
					x: '60%',
					y: '65%',
					delay: '1s',
				},
				{
					type: 'game-element',
					content: 'üíé',
					x: '20%',
					y: '60%',
					delay: '1.5s',
				},
				{
					type: 'score',
					content: '–†—ñ–≤–µ–Ω—å: 42',
					x: '15%',
					y: '80%',
					delay: '2s',
				},
			],
		},
		{
			id: 'web',
			title: '–í–ï–ë-–†–û–ó–†–û–ë–ö–ê',
			subtitle: '–°—É—á–∞—Å–Ω—ñ —Å–∞–π—Ç–∏ —Ç–∞ –¥–æ–¥–∞—Ç–∫–∏',
			icon: <Monitor className={styles.courseIcon} />,
			description: 'HTML, CSS, JavaScript, React - –ø–æ–≤–Ω–∏–π —Å—Ç–µ–∫ –≤–µ–±-—Ä–æ–∑—Ä–æ–±–∫–∏',
			gradient: 'web',
			features: [
				'–ê–¥–∞–ø—Ç–∏–≤–Ω–∞ –≤–µ—Ä—Å—Ç–∫–∞',
				'–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏',
				'–°—É—á–∞—Å–Ω—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó',
			],
			duration: '7 –º—ñ—Å—è—Ü—ñ–≤',
			age: '12-18 —Ä–æ–∫—ñ–≤',
			elements: [
				{
					type: 'web-element',
					content: '<div>',
					x: '20%',
					y: '25%',
					delay: '0s',
				},
				{
					type: 'web-element',
					content: '</div>',
					x: '70%',
					y: '30%',
					delay: '0.5s',
				},
				{
					type: 'web-element',
					content: 'React',
					x: '60%',
					y: '60%',
					delay: '1s',
				},
				{
					type: 'icon',
					content: <Palette className={styles.elementIcon} />,
					x: '25%',
					y: '65%',
					delay: '1.5s',
				},
			],
		},
	]

	return (
		<div className={styles.container} ref={sectionRef}>
			{/* Floating background elements */}
			<div className={styles.backgroundElements}>
				<div className={`${styles.floatingElement} ${styles.element1}`}></div>
				<div className={`${styles.floatingElement} ${styles.element2}`}></div>
				<div className={`${styles.floatingElement} ${styles.element3}`}></div>
				<div className={`${styles.floatingElement} ${styles.element4}`}></div>
			</div>

			<div className={styles.mainContainer}>
				{/* Hero Header */}
				<div
					className={`${styles.hero} ${isVisible ? styles.heroVisible : ''}`}
				>
					<div className={styles.heroContent}>
						<h1 className={`${styles.title} animate-up`}>
							<span className={styles.titleMain}>SmartCode</span>
							<span className={styles.titleAccent}>Academy</span>
						</h1>

						<p className={`${styles.subtitle} animate-up`}>
							–®–∫–æ–ª–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª—ñ–Ω–Ω—è, –¥–µ –¥—ñ—Ç–∏ —Å—Ç–≤–æ—Ä—é—é—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó
							–º–∞–π–±—É—Ç–Ω—å–æ–≥–æ
						</p>

						<div className={`${styles.heroFeatures} animate-slide`}>
							<div className={styles.feature}>
								<div className={styles.featureIcon}>
									<Users className={styles.icon} />
								</div>
								<span>–í—ñ–∫–æ–º 8-17 —Ä–æ–∫—ñ–≤</span>
							</div>
							<div className={styles.feature}>
								<div className={styles.featureIcon}>
									<Monitor className={styles.icon} />
								</div>
								<span>–û–Ω–ª–∞–π–Ω —ñ –æ—Ñ–ª–∞–π–Ω</span>
							</div>
							<div className={styles.feature}>
								<div className={styles.featureIcon}>
									<Award className={styles.icon} />
								</div>
								<span>–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç</span>
							</div>
						</div>

						<div className={styles.ctaButtons}>
							<button className={styles.primaryButton}>
								<Play className={styles.buttonIcon} />
								–ü–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ
							</button>
							<button className={styles.secondaryButton}>
								–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–∏–π —É—Ä–æ–∫
							</button>
						</div>
					</div>

					{/* Statistics */}
					<div className={`${styles.statsContainer} animate-up`}>
						{stats.map((stat, index) => (
							<div
								key={index}
								className={`${styles.statCard} ${
									currentStat === index ? styles.statCardActive : ''
								} animate-scale`}
								style={{ animationDelay: `${index * 0.1}s` }}
							>
								<div className={styles.statIcon}>{stat.icon}</div>
								<div className={styles.statContent}>
									<div className={styles.statNumber}>{stat.number}</div>
									<div className={styles.statLabel}>{stat.label}</div>
								</div>
							</div>
						))}
					</div>
				</div>

				{/* Courses Showcase */}
				<div className={styles.coursesSection}>
					<div className={styles.sectionHeader}>
						<h2 className={styles.sectionTitle}>–ù–∞—à—ñ –Ω–∞–≤—á–∞–ª—å–Ω—ñ –Ω–∞–ø—Ä—è–º–∫–∏</h2>
						<p className={styles.sectionSubtitle}>
							–û–±–µ—Ä–∏ —Å–≤—ñ–π —à–ª—è—Ö —É —Å–≤—ñ—Ç—ñ IT-—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π —Ç–∞ –ø–æ—á–Ω–∏ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –º–∞–π–±—É—Ç–Ω—î
							–≤–∂–µ —Å—å–æ–≥–æ–¥–Ω—ñ
						</p>
					</div>

					<div className={styles.coursesGrid}>
						{courses.map((course, index) => (
							<div
								key={course.id}
								className={`${styles.courseCard} ${
									isVisible ? styles.courseCardVisible : ''
								}`}
								style={{ animationDelay: `${0.5 + index * 0.2}s` }}
								onMouseEnter={() => setHoveredCard(index)}
								onMouseLeave={() => setHoveredCard(null)}
							>
								<div className={styles.courseHeader}>
									<div className={styles.courseInfo}>
										<h3 className={styles.courseTitle}>{course.title}</h3>
										<p className={styles.courseSubtitle}>{course.subtitle}</p>
									</div>
									<div
										className={`${styles.courseIconContainer} ${
											styles[course.gradient]
										}`}
									>
										{course.icon}
									</div>
								</div>

								{/* Interactive Screen */}
								<div
									className={`${styles.courseScreen} ${
										styles[course.gradient]
									}`}
								>
									<div className={styles.screenContent}>
										<p className={styles.courseDescription}>
											{course.description}
										</p>
									</div>

									{/* Animated Elements */}
									<div className={styles.animatedElements}>
										{course.elements.map((element, elementIndex) => (
											<div
												key={elementIndex}
												className={`${styles.animatedElement} ${
													styles[element.type]
												} ${hoveredCard === index ? styles.elementActive : ''}`}
												style={{
													left: element.x,
													top: element.y,
													animationDelay: element.delay,
												}}
											>
												{element.content}
											</div>
										))}
									</div>
								</div>

								{/* Course Details */}
								<div className={styles.courseDetails}>
									<div className={styles.courseFeatures}>
										{course.features.map((feature, featureIndex) => (
											<span key={featureIndex} className={styles.featureTag}>
												{feature}
											</span>
										))}
									</div>

									<div className={styles.courseMeta}>
										<div className={styles.metaItem}>
											<Clock className={styles.metaIcon} />
											<span>{course.duration}</span>
										</div>
										<div className={styles.metaItem}>
											<Users className={styles.metaIcon} />
											<span>{course.age}</span>
										</div>
									</div>

									<button className={styles.courseButton}>
										–î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –∫—É—Ä—Å
									</button>
								</div>
							</div>
						))}
					</div>
				</div>

				{/* Scroll Indicator */}
				<div className={styles.scrollIndicator}>
					<div className={styles.scrollText}>
						–ü—Ä–æ–∫—Ä—É—Ç–∏ –¥–ª—è –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
					</div>
					<ChevronDown className={styles.scrollIcon} />
				</div>
			</div>
		</div>
	)
}

export default Visit
